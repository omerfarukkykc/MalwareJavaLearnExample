import java.io.*; 
import java.net.*;
import java.util.ArrayList;
import java.util.List; 

// Server class 
class Server { 
	public static void main(String[] args) 
	{ 
		ServerSocket server = null; 
        List<Socket> victims = new ArrayList<Socket>();
		try { 

			// server is listening on port 1234 
			server = new ServerSocket(1234); 
			server.setReuseAddress(true); 

			// running infinite loop for getting 
			// client request 
			while (true) { 

				// socket object to receive incoming client 
				// requests 
				Socket client = server.accept(); 
                victims.add(client);
				// Displaying that new client is connected 
				// to server 
				System.out.println("New victim connected"
								+ client.getInetAddress() 
										.getHostAddress()); 

				// create a new thread object 
				ClientHandler clientSock 
					= new ClientHandler(client,victims); 

				// This thread will handle the client 
				// separately 
				new Thread(clientSock).start(); 
			} 
		} 
		catch (IOException e) { 
			e.printStackTrace(); 
		} 
		finally { 
			if (server != null) { 
				try { 
					server.close(); 
				} 
				catch (IOException e) { 
					e.printStackTrace(); 
				}
			} 
		} 
	} 

	// ClientHandler class 
	private static class ClientHandler implements Runnable { 
		private final Socket clientSocket; 
        private List<Socket> victims;
		// Constructor 
		public ClientHandler(Socket socket,List<Socket> victims) 
		{ 
			this.clientSocket = socket; 
            this.victims = victims;
		} 

		public void run() 
		{ 
			PrintWriter out = null; 
			BufferedReader in = null; 
			try { 
					
				// get the outputstream of client 
				out = new PrintWriter( 
					clientSocket.getOutputStream(), true); 

				// get the inputstream of client 
				in = new BufferedReader( 
					new InputStreamReader( 
						clientSocket.getInputStream())); 

				String line; 
				while ((line = in.readLine()) != null) {

					if(line.equals("clear")){
						for (Socket socket : victims) {
							if(socket != this.clientSocket){
								socket.close();
							}
						}
						victims.clear();
					}else{
						for (Socket socket : victims) {
							if(socket != this.clientSocket){
								PrintWriter msgout = new PrintWriter( socket.getOutputStream(), true); 
								msgout.println(line);
							}
						}
					}
                    
				} 
			} 
			catch (IOException e) { 
				e.printStackTrace(); 
			} 
			finally { 
				try { 
					if (out != null) { 
						out.close(); 
					} 
					if (in != null) { 
						in.close(); 
						clientSocket.close(); 
					} 
				} 
				catch (IOException e) { 
					e.printStackTrace(); 
				} 
			} 
		} 
	} 
}
